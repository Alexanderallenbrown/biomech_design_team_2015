
#include <piduino.h>

#include <encod.h>
/* 
An example of using the Encod library with the PiDuino library

SEEED studio Motor Shield V2
Pololu 50:1 gearmotor with 64 CPR encoder @ 12V

Alexander Brown, Ph.D.

*/
//Because the encod library uses interrupts, its usage is a little weird.
//You have to initialize it, but then attach the interrupts yourself. You
//must create a function that handles channel A and channel B for each encoder (0,1,2) you use.
//This is not a big deal.... see below. It's still a little wonky. The reason it has to be this way
//has to do with how attachInterrupt() is written.
 
//format: Encod(interrupt number, counts_per_revolution)
Encod enc1(0,50.0*64.0);//initialize an encoder
Encod enc2(1,50.0*64.0);//other encoder
//now initialize a "servo" PID object: format is:
//Piduino(int dirpin1,int dirpin2, int speedpin, float deadband, float inkp, float inki, float inkd, float inksum)
//Piduino servo1(8,11,9,25.0,5000,100,150.0,1.0);
//Piduino servo2(12,13,10,25.0,5000,100,150.0,1.0);
Piduino servo1(8,11,9,25.0,5000,75,100.0,1.0);
Piduino servo2(12,13,10,25.0,5000,75,100.0,1.0);


//Position data along mapped 'g'
//int len = 98;
//float time[] =  {5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7,7.1,7.2,7.3,7.4,7.5,7.6,7.7,7.8,7.9,8,8.1,8.2,8.3,8.4,8.5,8.6,8.7,8.8,8.9,9,9.1,9.2,9.3,9.4,9.5,9.6,9.7,9.8,9.9,10,10.1,10.2,10.3,10.4,10.5,10.6,10.7,10.8,10.9,11,11.1,11.2,11.3,11.4,11.5,11.6,11.7,11.8,11.9,12,12.1,12.2,12.3,12.4,12.5,12.6,12.7,12.8,12.9,13,13.1,13.2,13.3,13.4,13.5,13.6,13.7,13.8,13.9,14,14.1,14.2,14.3,14.4,14.5,14.6,14.7,14.8,17.0};
//float theta_ones[] = {0.23445,0.24996,0.26672,0.28392,0.30082,0.31711,0.33263,0.34687,0.36007,0.37164,0.38195,0.39037,0.39657,0.40046,0.40208,0.40142,0.39816,0.39327,0.38664,0.37875,0.36957,0.35921,0.34788,0.33541,0.32202,0.30821,0.29372,0.27863,0.26297,0.24714,0.23123,0.21568,0.20055,0.18593,0.17217,0.15951,0.14808,0.1381,0.12953,0.12351,0.11881,0.11614,0.11568,0.11758,0.12187,0.12842,0.13644,0.14464,0.1526,0.16085,0.1695,0.17721,0.1848,0.19195,0.19597,0.19829,0.19462,0.18738,0.17682,0.1655,0.15026,0.13497,0.11973,0.10464,0.089392,0.074123,0.058701,0.04312,0.027387,0.011698,-0.0041554,-0.019753,-0.035287,-0.050586,-0.065365,-0.079634,-0.093041,-0.1053,-0.11624,-0.12604,-0.13359,-0.13833,-0.14115,-0.14133,-0.13918,-0.13373,-0.12594,-0.11624,-0.10452,-0.092143,-0.079528,-0.065882,-0.051908,-0.037482,-0.022667,-0.0071714,0.0084489,0.024321,0.0};
//float theta_threes[] = {2.1874,2.1879,2.1856,2.1812,2.1755,2.1681,2.1589,2.1482,2.1365,2.1236,2.1098,2.095,2.0797,2.0636,2.0473,2.031,2.0151,1.9996,1.9848,1.9706,1.9572,1.9449,1.9335,1.9236,1.9151,1.9077,1.9018,1.8974,1.8953,1.8956,1.8984,1.9034,1.9108,1.9199,1.9311,1.9437,1.9576,1.9725,1.9883,2.0043,2.02,2.0356,2.0506,2.065,2.0784,2.0905,2.1019,2.1132,2.1247,2.136,2.1467,2.1561,2.1648,2.1722,2.1774,2.1817,2.1831,2.1829,2.1814,2.1798,2.1777,2.1754,2.173,2.1705,2.1682,2.1661,2.1642,2.1626,2.1613,2.16,2.1589,2.1576,2.1561,2.1545,2.1524,2.1495,2.1456,2.1404,2.1337,2.126,2.1161,2.1039,2.0909,2.0763,2.0602,2.0423,2.0238,2.0051,1.9867,1.9687,1.9512,1.9348,1.9193,1.9048,1.8915,1.8797,1.8693,1.8609,0.0};
//float ktheta_ones[] = {};
//float ktheta_threes[] = {};

//g from data to theta
int len = 100;
float time[] = {5,5.0526,5.1025,5.141,5.1765,5.2092,5.2398,5.2686,5.2963,5.3221,5.346,5.3711,5.4464,5.4729,5.5024,5.5316,5.5594,5.5862,5.6136,5.6412,5.6688,5.6971,5.7258,5.7544,5.7814,5.8029,5.8076,5.8457,5.8786,5.9139,5.9474,5.9803,6.0116,6.0412,6.0717,6.0978,6.1007,6.1243,6.1508,6.1763,6.1999,6.2233,6.2484,6.2744,6.3004,6.3265,6.3539,6.3824,6.4113,6.4405,6.4696,6.4995,6.5273,6.5559,6.5799,6.6077,6.7548,6.8237,6.8679,6.9399,7.1121,7.1139,7.1295,7.161,7.1916,7.2251,7.2578,7.28,7.3032,7.3193,7.3296,7.3435,7.3591,7.4329,7.4705,7.4991,7.5189,7.5377,7.5607,7.5847,7.6096,7.6353,7.6632,7.6924,7.7228,7.754,7.7865,7.8195,7.8558,7.8935,7.925,7.9517,7.9771,8.0073,8.0396,8.0725,8.1071,8.143,8.1806,8.1806,8.1806};
float theta_ones[] = {0.18413,0.18608,0.19134,0.19635,0.2012,0.20501,0.20776,0.20941,0.21002,0.20952,0.20804,0.20586,0.20263,0.19851,0.19293,0.18617,0.17863,0.17048,0.16139,0.15163,0.14149,0.13084,0.11984,0.1087,0.097684,0.087139,0.076946,0.067896,0.059687,0.053684,0.049466,0.046492,0.045646,0.046214,0.047726,0.050598,0.053738,0.057806,0.062739,0.068066,0.073397,0.078968,0.08527,0.092158,0.099282,0.10637,0.11423,0.12284,0.13197,0.14172,0.15178,0.1621,0.17249,0.183,0.19337,0.20361,0.21378,0.22138,0.22186,0.215,0.20449,0.19396,0.18351,0.17325,0.16306,0.15296,0.14292,0.13278,0.12267,0.11251,0.10234,0.09223,0.082156,0.072064,0.061956,0.051832,0.041744,0.031677,0.021614,0.01157,0.0015599,-0.0083782,-0.018087,-0.027404,-0.036229,-0.044222,-0.051375,-0.057313,-0.062445,-0.066341,-0.069398,-0.071306,-0.072809,-0.072956,-0.071802,-0.069959,-0.067034,-0.063525,-0.059294,-0.059294,-0.059294};
float theta_threes[] = {1.3867,1.3842,1.3787,1.3719,1.365,1.3573,1.3489,1.3399,1.3304,1.3203,1.3099,1.2992,1.2883,1.2772,1.2661,1.255,1.244,1.2333,1.2231,1.2134,1.2043,1.1959,1.1888,1.1832,1.1796,1.1779,1.1772,1.1785,1.1812,1.1868,1.1938,1.2017,1.211,1.2208,1.2309,1.2414,1.2519,1.2624,1.2729,1.2832,1.2936,1.3039,1.3139,1.3237,1.3332,1.3428,1.3518,1.3602,1.3677,1.3742,1.3797,1.3846,1.3883,1.3915,1.3939,1.3962,1.3976,1.3978,1.3965,1.3941,1.3916,1.3892,1.3873,1.3861,1.385,1.3844,1.3838,1.3829,1.3822,1.3812,1.3801,1.3792,1.3783,1.3773,1.376,1.3747,1.3736,1.3725,1.3707,1.3685,1.3658,1.3626,1.3584,1.3532,1.3471,1.3402,1.3324,1.3235,1.3142,1.3044,1.2944,1.2844,1.2743,1.2644,1.255,1.2457,1.2371,1.2287,1.221,1.221,1.221};
float ktheta_ones[] = {0.14242,0.013581,0.17678,0.19973,0.33576,0.40383,0.41035,0.36277,0.2608,0.13116,0.027542,0.17194,0.36895,0.77672,1.1308,1.3972,1.6141,1.992,2.2661,2.4506,2.6806,2.8914,2.9876,2.8951,2.6142,2.4343,1.9178,1.5196,0.57472,0.042707,0.24022,0.47488,0.45354,0.35259,0.10541,0.019459,0.25248,0.55861,0.73756,0.774,0.9091,1.2352,1.5246,1.6695,1.6982,2.0742,2.4419,2.7063,2.9152,2.9771,2.9568,2.8193,2.7081,2.5135,2.4633,2.2052,1.8507,0.39828,2.6714,2.4623,2.4602,2.3947,2.2588,2.2389,2.1828,2.1797,2.3142,2.3132,2.4066,2.4697,2.4534,2.4642,2.5402,2.6279,2.6646,2.6273,2.656,2.8085,2.8924,2.9552,2.9985,3.0003,2.9041,2.7086,2.3722,1.9398,1.3078,0.91169,0.41827,0.13587,0.16605,0.26006,0.43754,0.47517,0.43839,0.30461,0.19038,0.0099143,0.033691,0.033691,0.033691};
float ktheta_threes[] = {0.22374,0.065005,0.27507,0.31214,0.60671,0.9076,1.2249,1.5053,1.7897,2.0203,2.1566,2.3641,2.515,2.7299,2.826,2.8497,2.8396,2.7664,2.6521,2.5372,2.3295,1.9962,1.5503,1.0211,0.53727,0.34233,0.018505,0.17555,0.2146,0.012408,0.28534,0.8789,1.331,1.6564,2.0739,2.1883,2.4467,2.6485,2.7397,2.765,2.8187,2.8878,2.8989,2.8889,2.8901,2.779,2.5514,2.2618,1.8241,1.4203,1.1327,0.67004,0.46687,0.20661,0.15867,0.069077,0.27681,0.96965,0.47443,0.18081,0.16892,0.092493,0.034278,0.055512,0.10153,0.10841,0.012321,0.017851,0.057958,0.11384,0.093463,0.10018,0.17508,0.2747,0.31952,0.26869,0.30352,0.53863,0.71733,0.90519,1.1218,1.5343,1.9142,2.2691,2.6041,2.8279,2.9168,2.8516,2.637,2.4215,2.0755,1.9141,1.4527,0.9996,0.75185,0.40975,0.23828,0.053196,2.2093,2.2093,2.2093};

//o from data to theta 
//int len = 100;
//float time[] = {5,5.1931,5.2242,5.2519,5.2769,5.3,5.3211,5.341,5.3606,5.3795,5.3975,5.415,5.4321,5.4487,5.4654,5.4815,5.4976,5.5136,5.5297,5.5457,5.562,5.5778,5.5935,5.6083,5.6227,5.6428,5.9558,5.9657,5.9802,5.9968,6.0136,6.0311,6.049,6.0675,6.0858,6.1035,6.1218,6.1403,6.1592,6.1788,6.1992,6.2202,6.242,6.2643,6.2867,6.3076,6.3295,6.3495,6.3542,6.3821,6.4068,6.4319,6.4567,6.4806,6.5042,6.5264,6.5475,6.5687,6.59,6.6109,6.6317,6.6521,6.6718,6.6915,6.7115,6.7307,6.7497,6.7683,6.7877,6.8105,6.843,6.942,6.9468,6.9558,6.9654,6.9788,6.9939,7.0087,7.0227,7.0366,7.0519,7.067,7.0818,7.0969,7.1122,7.1274,7.1431,7.1596,7.1769,7.1952,7.214,7.2334,7.2538,7.2752,7.2972,7.3204,7.3446,7.3682,7.3904,7.3904,7.3904};
//float theta_ones[] = {0.18413,0.18559,0.18975,0.19322,0.19651,0.19988,0.20253,0.20492,0.20768,0.21023,0.21242,0.21442,0.21623,0.21772,0.21913,0.22016,0.22097,0.22157,0.22197,0.22214,0.2221,0.22168,0.221,0.21998,0.21865,0.21725,0.21564,0.21365,0.21124,0.2084,0.20529,0.20184,0.19807,0.19395,0.18963,0.18526,0.18056,0.17569,0.17064,0.16537,0.15979,0.1537,0.14746,0.14113,0.13468,0.12833,0.12205,0.11594,0.11016,0.10462,0.099377,0.094589,0.090255,0.086254,0.082786,0.07925,0.075771,0.072772,0.070239,0.068216,0.066394,0.064977,0.064151,0.063592,0.063152,0.06323,0.063685,0.064478,0.065454,0.066479,0.067508,0.068688,0.070276,0.072186,0.074137,0.076508,0.079187,0.081974,0.084718,0.087543,0.090761,0.094044,0.097299,0.10073,0.10423,0.1077,0.11131,0.11521,0.11942,0.12402,0.12858,0.13311,0.13789,0.14296,0.14829,0.15378,0.15938,0.16503,0.17078,0.17078,0.17078};
//float theta_threes[] = {1.3867,1.3884,1.3869,1.3837,1.3803,1.377,1.373,1.3689,1.365,1.361,1.3567,1.3522,1.3477,1.3429,1.3381,1.3331,1.3279,1.3226,1.3172,1.3118,1.3062,1.3004,1.2946,1.2886,1.2825,1.2764,1.2702,1.264,1.2576,1.2512,1.2448,1.2384,1.232,1.2256,1.2192,1.2128,1.2066,1.2004,1.1942,1.1882,1.1825,1.1775,1.1728,1.1684,1.1648,1.1622,1.1601,1.1587,1.1582,1.158,1.1585,1.1598,1.1617,1.1641,1.1671,1.17,1.173,1.1764,1.1803,1.1847,1.1892,1.1939,1.199,1.2043,1.2096,1.2152,1.2209,1.2267,1.2326,1.2385,1.2444,1.2503,1.2563,1.2623,1.2683,1.2743,1.2802,1.2862,1.2921,1.298,1.3038,1.3096,1.3154,1.3212,1.3268,1.3325,1.3381,1.3436,1.3489,1.354,1.359,1.3641,1.3689,1.3733,1.3772,1.3808,1.3841,1.3866,1.3883,1.3883,1.3883};
//float ktheta_ones[] = {0.23445,0.24996,0.26672,0.28392,0.30082,0.31711,0.33263,0.34687,0.36007,0.37164,0.38195,0.39037,0.39657,0.40046,0.40208,0.40142,0.39816,0.39327,0.38664,0.37875,0.36957,0.35921,0.34788,0.33541,0.32202,0.30821,0.29372,0.27863,0.26297,0.24714,0.23123,0.21568,0.20055,0.18593,0.17217,0.15951,0.14808,0.1381,0.12953,0.12351,0.11881,0.11614,0.11568,0.11758,0.12187,0.12842,0.13644,0.14464,0.1526,0.16085,0.1695,0.17721,0.1848,0.19195,0.19597,0.19829,0.19462,0.18738,0.17682,0.1655,0.15026,0.13497,0.11973,0.10464,0.089392,0.074123,0.058701,0.04312,0.027387,0.011698,-0.0041554,-0.019753,-0.035287,-0.050586,-0.065365,-0.079634,-0.093041,-0.1053,-0.11624,-0.12604,-0.13359,-0.13833,-0.14115,-0.14133,-0.13918,-0.13373,-0.12594,-0.11624,-0.10452,-0.092143,-0.079528,-0.065882,-0.051908,-0.037482,-0.022667,-0.0071714,0.0084489,0.024321};
//float ktheta_threes[] = {2.1874,2.1879,2.1856,2.1812,2.1755,2.1681,2.1589,2.1482,2.1365,2.1236,2.1098,2.095,2.0797,2.0636,2.0473,2.031,2.0151,1.9996,1.9848,1.9706,1.9572,1.9449,1.9335,1.9236,1.9151,1.9077,1.9018,1.8974,1.8953,1.8956,1.8984,1.9034,1.9108,1.9199,1.9311,1.9437,1.9576,1.9725,1.9883,2.0043,2.02,2.0356,2.0506,2.065,2.0784,2.0905,2.1019,2.1132,2.1247,2.136,2.1467,2.1561,2.1648,2.1722,2.1774,2.1817,2.1831,2.1829,2.1814,2.1798,2.1777,2.1754,2.173,2.1705,2.1682,2.1661,2.1642,2.1626,2.1613,2.16,2.1589,2.1576,2.1561,2.1545,2.1524,2.1495,2.1456,2.1404,2.1337,2.126,2.1161,2.1039,2.0909,2.0763,2.0602,2.0423,2.0238,2.0051,1.9867,1.9687,1.9512,1.9348,1.9193,1.9048,1.8915,1.8797,1.8693,1.8609}; 


//l from data to theta
//int len = 100;
//float time[] = {5,5.0002,5.0066,5.0107,5.0135,5.0159,5.0185,5.0211,5.0241,5.0272,5.0306,5.0342,5.0378,5.0415,5.0458,5.0502,5.0554,5.0609,5.0663,5.0719,5.078,5.0842,5.0905,5.097,5.1036,5.1106,5.1178,5.1249,5.132,5.1389,5.1457,5.1523,5.159,5.1656,5.1725,5.1788,5.1848,5.1908,5.1962,5.2013,5.2065,5.2118,5.2172,5.2224,5.2272,5.2316,5.236,5.2405,5.2449,5.2491,5.2533,5.2575,5.2616,5.2658,5.27,5.2743,5.2783,5.2825,5.2867,5.2912,5.2958,5.3004,5.305,5.31,5.315,5.32,5.3252,5.3302,5.3347,5.3392,5.3435,5.3477,5.352,5.3563,5.3607,5.3653,5.3696,5.3744,5.3793,5.3843,5.3894,5.3944,5.3995,5.4044,5.4106,5.417,5.4238,5.431,5.4386,5.445,5.4473,5.4493,5.4522,5.4601,5.4668,5.4711,5.4791,5.4803,5.4803,5.4803,5.4803};
//float theta_ones[] = {0.18413,0.18492,0.18487,0.18335,0.18103,0.17828,0.17537,0.17247,0.16956,0.16666,0.16377,0.16088,0.15799,0.15512,0.15225,0.14939,0.14654,0.14371,0.14087,0.13805,0.13524,0.13244,0.12964,0.12685,0.12407,0.1213,0.11854,0.11577,0.11301,0.11025,0.10748,0.10472,0.10195,0.09919,0.096435,0.093673,0.090905,0.088139,0.085363,0.082583,0.079806,0.077033,0.074264,0.071493,0.068715,0.065933,0.063152,0.060373,0.057595,0.054815,0.052038,0.049259,0.046481,0.043705,0.04093,0.038157,0.035382,0.03261,0.02984,0.027073,0.024309,0.021547,0.018786,0.016029,0.013275,0.010522,0.0077707,0.0050179,0.0022592,-0.00049921,-0.0032587,-0.0060191,-0.0087787,-0.011537,-0.014294,-0.01705,-0.019807,-0.02256,-0.025312,-0.028063,-0.030814,-0.033567,-0.03632,-0.039074,-0.041821,-0.044566,-0.047311,-0.050054,-0.052797,-0.055543,-0.0583,-0.061067,-0.063833,-0.066601,-0.069366,-0.072125,-0.074883,-0.077637,-0.077637,-0.077637,-0.077637};
//float theta_threes[] = {1.3867,1.3875,1.3879,1.3878,1.3873,1.3867,1.3862,1.3856,1.3851,1.3846,1.3842,1.3838,1.3834,1.383,1.3827,1.3824,1.3821,1.3819,1.3818,1.3816,1.3815,1.3814,1.3814,1.3813,1.3813,1.3813,1.3814,1.3814,1.3815,1.3815,1.3816,1.3816,1.3817,1.3818,1.3818,1.3819,1.3819,1.382,1.382,1.382,1.382,1.382,1.382,1.3821,1.382,1.382,1.382,1.382,1.382,1.382,1.382,1.382,1.382,1.382,1.382,1.382,1.3821,1.3821,1.3821,1.3822,1.3822,1.3823,1.3824,1.3825,1.3826,1.3827,1.3829,1.383,1.3831,1.3832,1.3833,1.3834,1.3835,1.3836,1.3837,1.3838,1.3839,1.3841,1.3842,1.3844,1.3845,1.3847,1.3848,1.385,1.3852,1.3854,1.3856,1.3858,1.386,1.3862,1.3864,1.3864,1.3865,1.3866,1.3867,1.3868,1.3869,1.3872,1.3872,1.3872,1.3872};
//float ktheta_ones[] = {0.23445,0.24996,0.26672,0.28392,0.30082,0.31711,0.33263,0.34687,0.36007,0.37164,0.38195,0.39037,0.39657,0.40046,0.40208,0.40142,0.39816,0.39327,0.38664,0.37875,0.36957,0.35921,0.34788,0.33541,0.32202,0.30821,0.29372,0.27863,0.26297,0.24714,0.23123,0.21568,0.20055,0.18593,0.17217,0.15951,0.14808,0.1381,0.12953,0.12351,0.11881,0.11614,0.11568,0.11758,0.12187,0.12842,0.13644,0.14464,0.1526,0.16085,0.1695,0.17721,0.1848,0.19195,0.19597,0.19829,0.19462,0.18738,0.17682,0.1655,0.15026,0.13497,0.11973,0.10464,0.089392,0.074123,0.058701,0.04312,0.027387,0.011698,-0.0041554,-0.019753,-0.035287,-0.050586,-0.065365,-0.079634,-0.093041,-0.1053,-0.11624,-0.12604,-0.13359,-0.13833,-0.14115,-0.14133,-0.13918,-0.13373,-0.12594,-0.11624,-0.10452,-0.092143,-0.079528,-0.065882,-0.051908,-0.037482,-0.022667,-0.0071714,0.0084489,0.024321};
//float ktheta_threes[] = {2.1874,2.1879,2.1856,2.1812,2.1755,2.1681,2.1589,2.1482,2.1365,2.1236,2.1098,2.095,2.0797,2.0636,2.0473,2.031,2.0151,1.9996,1.9848,1.9706,1.9572,1.9449,1.9335,1.9236,1.9151,1.9077,1.9018,1.8974,1.8953,1.8956,1.8984,1.9034,1.9108,1.9199,1.9311,1.9437,1.9576,1.9725,1.9883,2.0043,2.02,2.0356,2.0506,2.065,2.0784,2.0905,2.1019,2.1132,2.1247,2.136,2.1467,2.1561,2.1648,2.1722,2.1774,2.1817,2.1831,2.1829,2.1814,2.1798,2.1777,2.1754,2.173,2.1705,2.1682,2.1661,2.1642,2.1626,2.1613,2.16,2.1589,2.1576,2.1561,2.1545,2.1524,2.1495,2.1456,2.1404,2.1337,2.126,2.1161,2.1039,2.0909,2.0763,2.0602,2.0423,2.0238,2.0051,1.9867,1.9687,1.9512,1.9348,1.9193,1.9048,1.8915,1.8797,1.8693,1.8609};


float tvector_scale = .5;



// Second Motor  
int init_1 = 0;   // analog pin used to connect the potentiometer
int val_1;        // variable to read the value from the analog pin 
int init_2 = 0;   // a
int val_2; 
float start_time = 0;//the millis() value where the trial starts.
bool go = false;
int gopin = 5;//this is the pin for a switch to start the trial.
//int theta_1 = 0;
//int theta_3 = 0; 
int L1 = 5;
int L3 = 3;

/// Stuff for filtering force sensor readings.
float tau = 0.030; //seconds, filter time constant
float dT = 0.01;// seconds, initial guess of dT
float alpha = .5; // guess for filter constant.
float sensorValue1_smooth = 0;
float sensorValue1_smooth_old = 0;
float sensorValue2_smooth = 0;
float sensorValue2_smooth_old = 0;
float sensorValue3_smooth = 0;
float sensorValue3_smooth_old = 0;

float floatpos_smooth = 0;
float floatpos_smooth_old = 0;

long reading_sum1 = 0;
long reading_sum2 = 0;
int zero_offset1;
int zero_offset2;

const float pi = 3.14159;
float ftheta_1=theta_ones[0];
float ftheta_3=theta_threes[0];
float currtime = 0;
float pos1 = 0;
float pos2 = 0;
float Fx;
float Fy;
float voltage1x;
float voltage2x;
float voltage3x;
float voltage2y;
float voltage3y;
float netx;
float nety;
float theta1star = 0;
float theta3star = 0;
float e1sqt = 0;
float e3sqt = 0;
float e_total = 0;
float T1 = 0;
float T3 = 0;
float fktheta1 = 0;
float fktheta3 = 0;


//for pausing time...
float tottheta1 = 0;
float tottheta3 = 0;
float e1 = 0;
float e3 = 0;

float ethresh = 1.3;//if error is greater than this, we will PAUSE TIME...


void setup()
{
  Serial.begin(115200);
  //you have to manually attach interrupts for each encoder (1,2,..)
  attachInterrupt(enc1._interrupt1,e1_ISRA,CHANGE);
  attachInterrupt(enc1._interrupt2,e1_ISRB,CHANGE);
  attachInterrupt(enc2._interrupt1,e2_ISRA,CHANGE);
  attachInterrupt(enc2._interrupt2,e2_ISRB,CHANGE);
}


void loop() 
{ go = digitalRead(gopin);
 
 float realtime = millis()/1000.0;
    
  int sensorValue1 = analogRead(A0);
  int sensorValue2 = analogRead(A1);
  int sensorValue3 = analogRead(A2);
  
  // We are going to try to use a low pass filter to smooth out the sensor readings
  // RC = tau = dT*(1-alpha)/alpha where alpha is between 0 and 1
  // tau is at the top of this file
  alpha = 1/(tau/dT+1);
  sensorValue1_smooth = sensorValue1_smooth_old + alpha*(sensorValue1-sensorValue1_smooth_old); 
  sensorValue1_smooth_old = sensorValue1_smooth;
  sensorValue2_smooth = sensorValue2_smooth_old + alpha*(sensorValue2-sensorValue2_smooth_old); 
  sensorValue2_smooth_old = sensorValue2_smooth;
  sensorValue3_smooth = sensorValue3_smooth_old + alpha*(sensorValue3-sensorValue3_smooth_old); 
  sensorValue3_smooth_old = sensorValue3_smooth;
  
  if(abs(e1)<=ethresh && abs(e3)<=ethresh){
  currtime = float(millis())*.001-start_time;
  currtime = currtime*tvector_scale;//this scales the time to slow down the letter.
}
else{
  Serial.println("TIME IS PAUSED DUDE");
}
  //currtime = 5.02;
//  Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V):
  voltage1x = float(sensorValue1_smooth)*(5/1023.0);
  voltage2x = 0.5*float(sensorValue2_smooth)*(5/1023.0);
  voltage3x = 0.5*float(sensorValue3_smooth)*(5/1023.0);
  voltage2y = (sqrt(3)/2)*float(sensorValue2_smooth)*(5/1023.0);
  voltage3y = (sqrt(3)/2)*float(sensorValue3_smooth)*(5/1023.0);
  Fx = voltage1x-voltage2x-voltage3x;
  Fy = voltage2y-voltage3y;
    
    
  if(currtime>time[0]&&currtime<time[len]){
      
  ftheta_1 = multiMap(currtime,time, theta_ones, len);
  ftheta_3 = multiMap(currtime,time, theta_threes, len);
  fktheta1 = multiMap(currtime,time,ktheta_ones,len);
  fktheta3 = multiMap(currtime,time,ktheta_threes,len);
  
  T1 = Fx*sin(ftheta_1) - Fy*cos(ftheta_1)*L1;
  T3 = -Fx*L3*cos(ftheta_3-pi/2) - Fy*L3*sin(ftheta_3-pi/2);
   
//0.015 works well for the stopped position, but not with positional control
//-0.001 to 0.001 seems to work a little bit. It can be a tad jumpy.
float k = 0.00; 
 

 theta1star = T1*k/(fktheta1);
 theta3star = T3*k/(fktheta3);
 
 //query the encoder object for its position in rad and its velocity in rad/s     
 pos1 = enc1.readPosRad();
 pos2 = enc2.readPosRad();
   
 float omega1  = enc1.readVelRad();        
 float omega2 =  enc2.readVelRad();

 tottheta1 = -ftheta_1-theta1star;//TOTAL angle sent as command to motor 1
 tottheta3 = ftheta_3-(pi/2)+theta3star;

 e1 = tottheta1-pos1;//total error now
 e3 = tottheta3-pos2;
 
//   use the PIDUINO library to write the command.
//   servo1.writePID(-ftheta_1,pos1,omega1);
//   servo2.writePID(-ftheta_3+(3.1415/2),pos2,omega2);
 servo1.writePID(tottheta1,pos1,omega1);
 servo2.writePID(tottheta3,pos2,omega2);
       
 // Calculate squared error of angular position offset from desired path 
 e1sqt += (pos1+ftheta_1)*(pos1+ftheta_1);
 e3sqt += (pos2+ftheta_3-(pi/2))*(pos2+ftheta_3-(pi/2));
 e_total = e1sqt + e3sqt;   
 
  }
  else{
    
   //query the encoder object for its position in rad and its velocity in rad/s
   pos1 = enc1.readPosRad();
   pos2 = enc2.readPosRad();
   
   float omega1  = enc1.readVelRad();        
   float omega2 =  enc2.readVelRad();
   
//   ftheta_1 = 0;
//   ftheta_3 = 3.1415/2;
   
//   servo1.writePID(-ftheta_1,pos1,omega1);
//   servo2.writePID(-ftheta_3+(3.1415/2),pos2,omega2);

//use the PIDUINO library to write the command.
  servo1.writePID(-ftheta_1-theta1star,pos1,omega1);
  servo2.writePID(ftheta_3-(pi/2)+theta3star,pos2,omega2); 
  e1sqt += 0;
  e3sqt += 0;
  e_total = e1sqt + e3sqt; 
  }
  
 // }  
// Serial.print(currtime);
// Serial.print("\t");
Serial.print(realtime,4);
Serial.print("\t");
Serial.print(ftheta_1,4);
Serial.print("\t");
 Serial.print(pos1,4);
 Serial.print("\t");
Serial.print(ftheta_3,4);
Serial.print("\t");
 Serial.print(pos2,4);
 Serial.print("\t");
Serial.print(e1,4);
 Serial.print("\t");
 Serial.print(e3,4);
 Serial.print("\t");
 Serial.print(theta1star);
 Serial.print("\t");
 Serial.print(theta3star);
 Serial.print("\t");
// Print out the force values you read:
//  Serial.print(voltage1x);  
//  Serial.print("\t");
//  Serial.print(voltage2x); 
//  Serial.print("\t");
//  Serial.print(voltage2y);
//  Serial.print("\t");
//  Serial.print(voltage3x);
//  Serial.print("\t");
//  Serial.print(voltage3y);
//  Serial.print("\t");
//  Serial.print(Fx);
//  Serial.print("\t");
//  Serial.print(Fy);
Serial.println();
delay(1);
 }
 
// note: the _in array should have increasing values
float multiMap(float val, float* _in, float* _out, uint8_t size){

  // take care the value is within range
  // val = constrain(val, _in[0], _in[size-1]);
  if (val <= _in[0]) {
    return _out[0];
 }
  if (val >= _in[size-1]){
    return _out[size-1];
  }
  // search right interval
  uint8_t pos = 1;  // _in[0] allready tested
  while(val > _in[pos]) pos++;
 
  // this will handle all exact "points" in the _in array
  if (val == _in[pos]) return _out[pos];

  // interpolate in the right segment for the rest
  return (val - _in[pos-1]) * (_out[pos] - _out[pos-1]) / (_in[pos] - _in[pos-1]) + _out[pos-1];
   float tnow = float(millis())*.001;
}
void e1_ISRA(){
  enc1.channelA();
}
void e1_ISRB(){
  enc1.channelB();
}
void e2_ISRA(){
  enc2.channelA();
}
void e2_ISRB(){
  enc2.channelB();
}
 
